#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

# @ <SNIPPET>
import sys

from openeye import oechem

if len(sys.argv) != 2:
    oechem.OEThrow.Usage("%s <mol-infile>" % sys.argv[0])

ims = oechem.oemolistream()
if not ims.open(sys.argv[1]):
    oechem.OEThrow.Fatal("Unable to open %s for reading" % sys.argv[1])

# @ <SNIPPET-ALTLOCFACT-MAKEALTMOL-FLAVOR>
ims.SetFlavor(oechem.OEFormat_PDB, oechem.OEIFlavor_PDB_ALTLOC)
# @ </SNIPPET-ALTLOCFACT-MAKEALTMOL-FLAVOR>

for mol in ims.GetOEGraphMols():
    if not oechem.OEHasResidues(mol):
        oechem.OEPerceiveResidues(mol, oechem.OEPreserveResInfo_All)

    # @ <SNIPPET-ALTLOCFACT-MAKEALTMOL-ALF>
    alf = oechem.OEAltLocationFactory(mol)
    # @ </SNIPPET-ALTLOCFACT-MAKEALTMOL-ALF>
    print("# atoms original.. %d" % alf.GetSourceMol().GetMaxAtomIdx())

    atom = alf.GetAltAtoms()
    if atom.IsValid():
        # @ <SNIPPET-ALTLOCFACT-MAKEALTMOL-SSMOL>
        # given OEAltLocationFactory alf and OEAtomBaseIter atom ...
        loc = alf.GetLocation(atom.next(), 'B')
        ssmol = oechem.OEGraphMol()
        if alf.MakeAltMol(ssmol, loc):
            # use the subset mol...
            # @ </SNIPPET-ALTLOCFACT-MAKEALTMOL-SSMOL>
            print("# atoms subset.... %d" % ssmol.GetMaxAtomIdx())
    else:
        print("no alternate location atoms")
# @ </SNIPPET>
