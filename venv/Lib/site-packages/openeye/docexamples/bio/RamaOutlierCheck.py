#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.

# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

########################################################################
# Perform a ramachandran analysis on your protein, print outliers
########################################################################

import sys
from openeye import oechem


def RamaCheck(mol):
    # @ <SNIPPET-RAMA-OUTLIER-CHECK>
    # Loop over the CA atoms in the protein
    for atom in mol.GetAtoms(oechem.OEIsCAlpha()):
        rama = oechem.OERamachandranAnalysis(atom)
        # Print out information about outliers for further analysis
        if rama.GetRamaCategory() == oechem.OERamaCategory_Outlier:
            res = oechem.OEAtomGetResidue(atom)
            print("Found: {}".format(oechem.OEGetRamachandranCategoryName(rama.GetRamaCategory())))
            print("  Residue: {} {} {}"
                  .format(res.GetName(), res.GetResidueNumber(), res.GetChainID()))
            ramatype = oechem.OEGetRamachandranTypeName(rama.GetRamaType())
            print("  Type: {}, Score: {}".format(ramatype, rama.GetRamaScore()))
    # @ </SNIPPET-RAMA-OUTLIER-CHECK>


def ReadProteinFromPDB(pdb_file, mol):
    ifs = oechem.oemolistream()
    flavor = oechem.OEIFlavor_PDB_Default | oechem.OEIFlavor_PDB_DATA | oechem.OEIFlavor_PDB_ALTLOC
    ifs.SetFlavor(oechem.OEFormat_PDB, flavor)

    if not ifs.open(pdb_file):
        oechem.OEThrow.Fatal("Unable to open %s for reading." % pdb_file)

    temp_mol = oechem.OEGraphMol()
    if not oechem.OEReadMolecule(ifs, temp_mol):
        oechem.OEThrow.Fatal("Unable to read molecule from %s." % pdb_file)
    ifs.close()

    fact = oechem.OEAltLocationFactory(temp_mol)
    mol.Clear()
    fact.MakePrimaryAltMol(mol)
    return (mol)


def main(argv=[__name__]):
    if len(argv) != 2:
        oechem.OEThrow.Usage("%s <mol-infile>" % argv[0])
    mol = oechem.OEGraphMol()
    ReadProteinFromPDB(argv[1], mol)
    RamaCheck(mol)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
