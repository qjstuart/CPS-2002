#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

from openeye import oechem
from openeye import oedepict

mol = oechem.OEGraphMol()
oechem.OESmilesToMol(mol, "C1CCCCC1O")
oedepict.OEPrepareDepiction(mol)

width, height = 400, 200
image = oedepict.OEImage(width, height)


# @ <SNIPPET-USER-DEF-ATOM-MARKUP>
class UserDataSVGAtomIdxMarkup(oedepict.OEAtomSVGMarkupBase):
    def GetClassName(self, atom):
        return "user-def-atom-class"

    def GetGroupId(self, atom):
        return "used-def-atom-{}".format(atom.GetIdx())

    def CreateCopy(self):
        return UserDataSVGAtomIdxMarkup().__disown__()


opts = oedepict.OE2DMolDisplayOptions(width, height, oedepict.OEScale_AutoScale)
opts.SetAtomSVGMarkupFunctor(UserDataSVGAtomIdxMarkup())
disp = oedepict.OE2DMolDisplay(mol, opts)

# @ </SNIPPET-USER-DEF-ATOM-MARKUP>

oedepict.OERenderMolecule(image, disp)
oedepict.OEWriteImage("UserAtomMarkup.svg", image)
