#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

import sys

from openeye import oechem
from openeye import oedocking


# @ <SNIPPET-DOCK-SCORE-TAGGING-1>
def TagPoses(dock, poses, sdtag):
    for pose in poses.GetConfs():
        score = dock.ScoreLigand(pose)
        stringScore = ('%f' % score)
        oechem.OESetSDData(pose, sdtag, stringScore)
# @ </SNIPPET-DOCK-SCORE-TAGGING-1>


def main(argv=[__name__]):
    if len(argv) != 3:
        oechem.OEThrow.Usage("%s <receptor> <conformers>" % argv[0])

    receptor = oechem.OEGraphMol()
    oedocking.OEReadReceptorFile(receptor, argv[1])
    dock = oedocking.OEDock()
    dock.Initialize(receptor)

    conformers = oechem.OEMol()
    imstr = oechem.oemolistream(argv[2])
    for conformers in imstr.GetOEMols():
        poses = oechem.OEMol()
        dock.DockMultiConformerMolecule(poses, conformers)
        TagPoses(dock, poses, dock.GetName())


if __name__ == "__main__":
    sys.exit(main(sys.argv))
