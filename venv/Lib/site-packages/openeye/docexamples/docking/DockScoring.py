#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

from __future__ import print_function
import sys

from openeye import oechem
from openeye import oedocking


# @ <SNIPPET-DOCK-SCORING-1>
def PrintScore(dock, pose):
    print("Total pose score = %f" % dock.ScoreLigand(pose))
    print("Score components contributions to score:")
    for comp in dock.GetComponentNames():
        print("%12s: %6.2f" % (comp, dock.ScoreLigandComponent(pose, comp)))
# @ </SNIPPET-DOCK-SCORING-1>


# @ <SNIPPET-DOCK-SCORING-2>
def PrintAtomScore(dock, pose, atom):
    print("")
    print("  Atom: %d score: %f" % (atom.GetIdx(), dock.ScoreAtom(atom, pose)))
    print("Score components contributions to atoms score: ")
    for comp in dock.GetComponentNames():
        print("%12s: %.2f" % (comp, dock.ScoreAtomComponent(atom, pose, comp)))
# @ </SNIPPET-DOCK-SCORING-2>


def main(argv=[__name__]):
    if len(argv) != 3:
        oechem.OEThrow.Usage("%s <receptor> <ligand>" % argv[0])

    receptor = oechem.OEGraphMol()
    oedocking.OEReadReceptorFile(receptor, argv[1])

    dock = oedocking.OEDock(oedocking.OEDockMethod_PLP)
    dock.Initialize(receptor)

    mcmol = oechem.OEMol()
    imstr = oechem.oemolistream(argv[2])
    oechem.OEReadMolecule(imstr, mcmol)

    # @ <SNIPPET-DOCK-SCORING-3>
    numPoses = 10
    poses = oechem.OEMol()
    dock.DockMultiConformerMolecule(poses, mcmol, numPoses)
    # @ </SNIPPET-DOCK-SCORING-3>

    for pose in poses.GetConfs():
        PrintScore(dock, pose)
        for atom in pose.GetAtoms():
            PrintAtomScore(dock, pose, atom)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
