#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

from __future__ import print_function
import sys

from openeye import oechem
from openeye import oedocking


def SetCustomConstraints(receptor, proteinHeavyAtom):
    # @ <SNIPPET-RECEPTOR-CUSTOM-CONSTRAINT-EDITING-3>
    customConstraints = oedocking.OEReceptorGetCustomConstraints(receptor)

    feature = customConstraints.AddFeature()
    feature.SetFeatureName("Example protein contact constraint")

    sphereRadius = 4.0
    sphereCenter = oechem.OEFloatArray(3)
    receptor.GetCoords(proteinHeavyAtom, sphereCenter)
    sphere = feature.AddSphere()
    sphere.SetRad(sphereRadius)
    sphere.SetCenter(sphereCenter[0], sphereCenter[1], sphereCenter[2])

    oedocking.OEReceptorSetCustomConstraints(receptor, customConstraints)
    # @ </SNIPPET-RECEPTOR-CUSTOM-CONSTRAINT-EDITING-3>


def main(argv=[__name__]):
    if len(argv) != 2:
        oechem.OEThrow.Usage("%s <receptor>" % argv[0])

    receptor = oechem.OEGraphMol()
    oedocking.OEReadReceptorFile(receptor, argv[1])

    # @ <SNIPPET-RECEPTOR-CUSTOM-CONSTRAINT-EDITING-1>
    if oedocking.OEReceptorHasCustomConstraints(receptor):
        print("Receptor has custom constraints")
    else:
        print("Receptor does not have custom constraints")
    # @ </SNIPPET-RECEPTOR-CUSTOM-CONSTRAINT-EDITING-1>

    # @ <SNIPPET-RECEPTOR-CUSTOM-CONSTRAINT-EDITING-2>
    customConstraints = oedocking.OEReceptorGetCustomConstraints(receptor)
    for feature in customConstraints.GetFeatures():
        print("Feature", feature.GetFeatureName())
        print("  Spheres : ")
        for sphere in feature.GetSpheres():
            print("    center (", sphere.GetX(), ", ", sphere.GetY(),
                  ", ", sphere.GetZ(), ")  radius ", sphere.GetRad())
        smartsIter = feature.GetSmarts()
        if not smartsIter.IsValid():
            print("  Constraint is matched by any heavy atom")
        else:
            print("  SMARTS:")
            for smarts in smartsIter:
                print("    " + smarts)
    # @ </SNIPPET-RECEPTOR-CUSTOM-CONSTRAINT-EDITING-2>

    for heavyAtom in receptor.GetAtoms():
        if not heavyAtom.IsHydrogen():
            SetCustomConstraints(receptor, heavyAtom)
            break

    # @ <SNIPPET-RECEPTOR-CUSTOM-CONSTRAINT-EDITING-4>
    oedocking.OEReceptorClearCustomConstraints(receptor)
    # @ </SNIPPET-RECEPTOR-CUSTOM-CONSTRAINT-EDITING-4>


if __name__ == "__main__":
    sys.exit(main(sys.argv))
