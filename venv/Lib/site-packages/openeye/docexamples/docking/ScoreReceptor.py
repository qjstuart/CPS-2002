#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

import sys

from openeye import oechem
from openeye import oedocking


# @ <SNIPPET-SCORE-RECEPTOR-1>
def PrintScore(score, pose):
    print("Total ligand score =  %f" % score.ScoreLigand(pose))
    print("Score components contributions to score:")
    for comp in score.GetComponentNames():
        print("%15s: %6.2f" % (comp, score.ScoreLigandComponent(pose, comp)))
# @ </SNIPPET-SCORE-RECEPTOR-1>


# @ <SNIPPET-SCORE-RECEPTOR-2>
def PrintAtomScore(score, pose, atom):
    print("\nAtom: %d  score: %6.2f " % (atom.GetIdx(), score.ScoreAtom(atom, pose)))
    print("Score components contribution to atom scores:")
    for comp in score.GetComponentNames():
        print("%15s: %.2f" % (comp, score.ScoreAtomComponent(atom, pose, comp)))
# @ </SNIPPET-SCORE-RECEPTOR-2>


def main(argv=[__name__]):
    if len(argv) != 3:
        oechem.OEThrow.Usage("%s <receptor> <ligand>" % argv[0])

    receptor = oechem.OEGraphMol()
    oedocking.OEReadReceptorFile(receptor, argv[1])

    oescore = oedocking.OEScore()
    oescore.Initialize(receptor)

    imstr = oechem.oemolistream(argv[2])
    mcmol = oechem.OEMol()
    oechem.OEReadMolecule(imstr, mcmol)

    for pose in mcmol.GetConfs():
        PrintScore(oescore, pose)
        for atom in pose.GetAtoms():
            PrintAtomScore(oescore, pose, atom)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
