#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

import sys
from openeye import oechem
from openeye import oedepict
from openeye import oegrapheme


def ImportMolecule(filename):

    ifs = oechem.oemolistream()
    if not ifs.open(filename):
        oechem.OEThrow.Fatal("Unable to open %s for reading" % filename)

    mol = oechem.OEGraphMol()
    oechem.OEReadMolecule(ifs, mol)

    oechem.OEAssignBondiVdWRadii(mol)
    oechem.OESuppressHydrogens(mol)

    return mol


# @ <SNIPPET-COMPLEX-SURFACE-ARC-DEFINITIONS>
def DrawSurfaceArc(image, depth, arc, pen):
    edgeAngle = 5.0
    patternAngle = 5.0
    minPatternWidthRatio = 0.05
    maxPatternWidthRatio = 0.10 * depth
    patternDirection = oegrapheme.OEPatternDirection_Outside
    oegrapheme.OEDrawSunSurfaceArc(image, arc.GetCenter(), arc.GetBgnAngle(), arc.GetEndAngle(),
                                   arc.GetRadius(), pen, edgeAngle,
                                   patternDirection, patternAngle,
                                   minPatternWidthRatio, maxPatternWidthRatio)


class SolventArcFxn(oegrapheme.OESurfaceArcFxnBase):
    def __call__(self, image, arc):
        pen = oedepict.OEPen(oechem.OELightGrey, oechem.OELightGrey)
        pen.SetLineWidth(0.5)
        oegrapheme.OEDrawDefaultSurfaceArc(image, arc.GetCenter(), arc.GetBgnAngle(),
                                           arc.GetEndAngle(), arc.GetRadius(), pen)
        return True


class BuriedArcFxn(oegrapheme.OESurfaceArcFxnBase):
    def __call__(self, image, arc):
        pen = oedepict.OEPen(oechem.OEGrey, oechem.OEGrey)
        pen.SetLineWidth(2.0)
        oegrapheme.OEDrawDefaultSurfaceArc(image, arc.GetCenter(), arc.GetBgnAngle(),
                                           arc.GetEndAngle(), arc.GetRadius(), pen)
        return True


class CavityArcFxn(oegrapheme.OEComplexSurfaceArcFxnBase):
    def __call__(self, image, arc):
        pen = oedepict.OEPen(oechem.OEBlack, oechem.OEBlack)
        pen.SetLineWidth(2.0)
        DrawSurfaceArc(image, self.GetDepth(), arc, pen)
        return True


class VoidArcFxn(oegrapheme.OEComplexSurfaceArcFxnBase):
    def __call__(self, image, arc):
        pen = oedepict.OEPen(oechem.OEDarkGrey, oechem.OEDarkGrey)
        pen.SetLineWidth(2.0)
        DrawSurfaceArc(image, self.GetDepth(), arc, pen)
        return True
# @ </SNIPPET-COMPLEX-SURFACE-ARC-DEFINITIONS>


if len(sys.argv) != 3:
    oechem.OEThrow.Usage("%s <receptor> <ligand>" % sys.argv[0])

receptor = ImportMolecule(sys.argv[1])
ligand = ImportMolecule(sys.argv[2])

width, height = 450, 350
image = oedepict.OEImage(width, height)

# @ <SNIPPET-COMPLEX-SURFACE-ARC-USAGE>
sfxn = SolventArcFxn()
bfxn = BuriedArcFxn()
cfxn = CavityArcFxn()
vfxn = VoidArcFxn()
oegrapheme.OEAddComplexSurfaceArcs(ligand, receptor, sfxn, bfxn, cfxn, vfxn)
# @ </SNIPPET-COMPLEX-SURFACE-ARC-USAGE>

oegrapheme.OEPrepareDepictionFrom3D(ligand)
opts = oedepict.OE2DMolDisplayOptions(width, height, oedepict.OEScale_AutoScale)
opts.SetScale(oegrapheme.OEGetMoleculeSurfaceScale(ligand, opts))

disp = oedepict.OE2DMolDisplay(ligand, opts)
oegrapheme.OEDraw2DSurface(disp)
oedepict.OERenderMolecule(image, disp)

oedepict.OERenderMolecule("DrawComplexSurfaceUserDefined.png", disp)
oedepict.OERenderMolecule("DrawComplexSurfaceUserDefined.pdf", disp)
