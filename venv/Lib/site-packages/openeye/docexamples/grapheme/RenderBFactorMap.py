#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.


import sys
from openeye import oechem
from openeye import oedepict
from openeye import oegrapheme

###############################################################
# USED TO GENERATE CODE SNIPPETS FOR THE GRAPHEME DOCUMENTATION
###############################################################


def ImportMolecule(filename):

    ifs = oechem.oemolistream()
    if not ifs.open(filename):
        oechem.OEThrow.Fatal("Unable to open %s for reading" % filename)

    mol = oechem.OEGraphMol()
    if not oechem.OEReadMolecule(ifs, mol):
        oechem.OEThrow.Fatal("Unable to read molecule in %s" % filename)

    return mol


if len(sys.argv) != 3:
    oechem.OEThrow.Usage("%s <receptor> <ligand>" % sys.argv[0])

protein = ImportMolecule(sys.argv[1])
ligand = ImportMolecule(sys.argv[2])

# @ <SNIPPET-RENDER-BFACTORMAP>
asite = oechem.OEInteractionHintContainer(protein, ligand)
oechem.OEPerceiveInteractionHints(asite)
oegrapheme.OEPrepareActiveSiteDepiction(asite)

image = oedepict.OEImage(800.0, 600.0)

opts = oegrapheme.OE2DActiveSiteDisplayOptions(image.GetWidth(), image.GetHeight())
opts.SetRenderInteractiveLegend(True)
adisp = oegrapheme.OE2DActiveSiteDisplay(asite, opts)

oegrapheme.OERenderBFactorMap(image, adisp)
oedepict.OEWriteImage("RenderBFactorMap.svg", image)
# @ </SNIPPET-RENDER-BFACTORMAP>
oedepict.OEWriteImage("RenderBFactorMap.pdf", image)

# @ <SNIPPET-DRAW-BFACTORMAP-LEGEND>
# initialize OE2DActiveSiteDisplay

cgimage = oedepict.OEImage(300.0, 100.0)
oegrapheme.OEDrawBFactorMapLegend(cgimage, adisp)
oedepict.OEWriteImage("DrawBFactorMapLegend.png", cgimage)
# @ </SNIPPET-DRAW-BFACTORMAP-LEGEND>
oedepict.OEWriteImage("DrawBFactorMapLegend.pdf", cgimage)
