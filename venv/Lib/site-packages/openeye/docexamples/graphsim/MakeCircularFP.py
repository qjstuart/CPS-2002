#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

from openeye import oechem
from openeye import oegraphsim

mol = oechem.OEGraphMol()
oechem.OESmilesToMol(mol, "c1ccccc1")

# @ <SNIPPET-MAKE-CIRCULAR-1>
fp = oegraphsim.OEFingerPrint()
oegraphsim.OEMakeCircularFP(fp, mol)
# @ </SNIPPET-MAKE-CIRCULAR-1>

print(fp.GetFPTypeBase().GetFPTypeString())

# @ <SNIPPET-MAKE-CIRCULAR-2>
oegraphsim.OEMakeFP(fp, mol, oegraphsim.OEFPType_Circular)
# @ </SNIPPET-MAKE-CIRCULAR-2>

print(fp.GetFPTypeBase().GetFPTypeString())

# @ <SNIPPET-MAKE-CIRCULAR-3>
numbits = 1024
minradius = 0
maxradius = 3
oegraphsim.OEMakeCircularFP(fp, mol, numbits, minradius, maxradius,
                            oegraphsim.OEFPAtomType_DefaultCircularAtom,
                            oegraphsim.OEFPBondType_DefaultCircularBond)
# @ </SNIPPET-MAKE-CIRCULAR-3>

print(fp.GetFPTypeBase().GetFPTypeString())
