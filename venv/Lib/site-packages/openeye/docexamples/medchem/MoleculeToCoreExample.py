#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

from __future__ import print_function
from openeye import oechem
from openeye import oemedchem
import sys


################################################################
# USED TO GENERATE CODE SNIPPETS FOR THE OEMEDCHEM DOCUMENTATION
# - please look at actual examples for useful utility code
################################################################


def MoleculeToCoreUsage(itf):
    ifs = oechem.oemolistream()
    if not ifs.open(itf.GetString("-input")):
        oechem.OEThrow.Fatal("Unable to open "+itf.GetString("-input")+" for reading")

    mol = oechem.OEGraphMol()
    if not oechem.OEReadMolecule(ifs, mol):
        oechem.OEThrow.Fatal("Error reading: "+itf.GetString("-input"))

    oechem.OEThrow.SetLevel(oechem.OEErrorLevel_Info)

    print()
    # @ <SNIPPET-MOLECULETOCORE-DB-EXAMPLE>
    # create an MCS fragment database with defaults
    fragdb = oemedchem.OEMCSFragDatabase()
    # use the options from the frag database to fragment an arbitrary input molecule
    print('MoleculeToCores using default fragment database options:')
    sortedcores = sorted([c for c in fragdb.MoleculeToCores(mol)])
    for corenum, core in enumerate(sortedcores):
        print('{}: {}'.format(corenum, core))
    # @ </SNIPPET-MOLECULETOCORE-DB-EXAMPLE>

    print()
    # @ <SNIPPET-MOLECULETOCORE-OPTS-EXAMPLE>
    # set the MCS fragment database options from the command-line arguments
    fragopts = oemedchem.OEMCSFragDatabaseOptions()
    if not oemedchem.OEConfigureMCSFragDatabaseOptions(itf):
        oechem.OEThrow.Fatal("Error configuring options")
    if not oemedchem.OESetupMCSFragDatabaseOptions(fragopts, itf):
        oechem.OEThrow.Fatal("Error setting options")

    # use the custom options to fragment an arbitrary input molecule
    print('MoleculeToCores using command-line options:')
    sortedcores = sorted([c for c in oemedchem.OEMoleculeToCores(mol, fragopts)])
    for corenum, core in enumerate(sortedcores):
        print('{}: {}'.format(corenum, core))
    # @ </SNIPPET-MOLECULETOCORE-OPTS-EXAMPLE>

    return True


############################################################
InterfaceData = """
# MoleculeToCores docexample
!CATEGORY MoleculeToCores
    !CATEGORY I/O
        !PARAMETER -input 1
          !ALIAS -i
          !TYPE string
          !REQUIRED true
          !BRIEF Input filename of structures to index
          !KEYLESS 1
        !END
    !END
!END
"""


def main(argv=[__name__]):
    itf = oechem.OEInterface(InterfaceData)
    oemedchem.OEConfigureMCSFragDatabaseOptions(itf)

    if not oechem.OEParseCommandLine(itf, argv):
        oechem.OEThrow.Fatal("Unable to interpret command line!")

    MoleculeToCoreUsage(itf)


if __name__ == "__main__":
    sys.exit(main(sys.argv))
