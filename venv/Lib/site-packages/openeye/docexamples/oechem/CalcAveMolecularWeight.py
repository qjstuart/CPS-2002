#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

# @ <SNIPPET>
from __future__ import print_function
from openeye import oechem


# @ <SNIPPET-MOL-WEIGHT>
def CalculateMolecularWeight(mol):
    implicitH = 0
    weight = 0.0
    for atom in mol.GetAtoms():
        elemno = atom.GetAtomicNum()
        mass = atom.GetIsotope()
        implicitH += atom.GetImplicitHCount()
        if elemno != 0 and mass != 0 and oechem.OEIsCommonIsotope(elemno, mass):
            weight += oechem.OEGetIsotopicWeight(elemno, mass)
        else:
            weight += oechem.OEGetAverageWeight(elemno)
    weight += implicitH * oechem.OEGetAverageWeight(oechem.OEElemNo_H)
    return weight


# @ </SNIPPET-MOL-WEIGHT>
mol = oechem.OEGraphMol()
oechem.OESmilesToMol(mol, "C(O)(=O)c1cccc2c1[nH]c(C3CCCc4c3cccc4)c2")
print("molecular weight=", CalculateMolecularWeight(mol))
# @ </SNIPPET>
