#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.
# @ <SNIPPET>
from openeye import oechem
# @ <SNIPPET-CUSTOM-MCSFUNC>
pattern = oechem.OEGraphMol()
target = oechem.OEGraphMol()
oechem.OESmilesToMol(pattern, "c1cc(O)c(O)cc1CCN")
oechem.OESmilesToMol(target, "c1c(O)c(O)c(Cl)cc1CCCBr")

atomexpr = oechem.OEExprOpts_DefaultAtoms
bondexpr = oechem.OEExprOpts_DefaultBonds
mcss = oechem.OEMCSSearch(pattern, atomexpr, bondexpr, oechem.OEMCSType_Exhaustive)


class MyMaxAtomsBondsMCSFunc(oechem.OEMCSFunc):
    def __call__(self, pattern, target, amap, bmap):
        atommap = oechem.OEAtomArray(amap, pattern.GetMaxAtomIdx())
        bondmap = oechem.OEBondArray(bmap, pattern.GetMaxBondIdx())
        atomcount = 0
        bondcount = 0
        for atom in atommap:
            if atom is not None:
                atomcount += 1
        for bond in bondmap:
            if bond is not None:
                bondcount += 1
        return atomcount + bondcount

    def CreateCopy(self):
        return MyMaxAtomsBondsMCSFunc().__disown__()


mcss.SetMCSFunc(MyMaxAtomsBondsMCSFunc())
# @ </SNIPPET-CUSTOM-MCSFUNC>
unique = True
for count, match in enumerate(mcss.Match(target, unique)):
    print("Match %d:" % (count + 1))
    mol = oechem.OEGraphMol()
    oechem.OESubsetMol(mol, match, True)
    print("match smiles =", oechem.OEMolToSmiles(mol))

# @ </SNIPPET>
