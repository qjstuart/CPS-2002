#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

# @ <SNIPPET>
from __future__ import print_function

from openeye import oechem

qfile = oechem.oemolistream("query.mol")
tfile = oechem.oemolistream("targets.sdf")

# set the same aromaticity model for the query and the target file
# @ <SNIPPET-SETAROMODEL>
aromodel = oechem.OEIFlavor_Generic_OEAroModelMDL
qflavor = qfile.GetFlavor(qfile.GetFormat())
qfile.SetFlavor(qfile.GetFormat(), (qflavor | aromodel))
tflavor = tfile.GetFlavor(tfile.GetFormat())
tfile.SetFlavor(tfile.GetFormat(), (tflavor | aromodel))
# @ </SNIPPET-SETAROMODEL>

# read MDL query and initialize the substructure search
opts = oechem.OEMDLQueryOpts_Default | oechem.OEMDLQueryOpts_SuppressExplicitH
qmol = oechem.OEQMol()

# @ <SNIPPET-READQMOL>
oechem.OEReadMDLQueryFile(qfile, qmol, opts)
ss = oechem.OESubSearch(qmol)
# @ </SNIPPET-READQMOL>

# loop over target structures
tindex = 1
for tmol in tfile.GetOEGraphMols():
    oechem.OEPrepareSearch(tmol, ss)
    if ss.SingleMatch(tmol):
        print("hit target =", tindex)
    tindex += 1
# @ </SNIPPET>
