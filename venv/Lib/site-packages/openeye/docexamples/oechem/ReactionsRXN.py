#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

# @ <SNIPPET>
from __future__ import print_function
from openeye import oechem


def printatoms(label, begin):
    print(label)
    for atom in begin:
        print(" atom:", atom.GetIdx(), oechem.OEGetAtomicSymbol(atom.GetAtomicNum()), end=" ")
        print("in component", atom.GetData(oechem.OEProperty_Component), end=" ")
        # @ <SNIPPET-RXN-MAPIDX>
        print("with map index", atom.GetMapIdx())
        # @ </SNIPPET-RXN-MAPIDX>


rfile = oechem.oemolistream("amide.rxn")
reaction = oechem.OEQMol()
# reading reaction
# @ <SNIPPET-RXN-OPT>
opt = oechem.OEMDLQueryOpts_ReactionQuery | oechem.OEMDLQueryOpts_SuppressExplicitH
# @ </SNIPPET-RXN-OPT>
# @ <SNIPPET-READREACTION>
oechem.OEReadMDLReactionQueryFile(rfile, reaction, opt)
# @ </SNIPPET-READREACTION>
# @ <SNIPPET-RXN-ATOMS>
printatoms("Reactant atoms:", reaction.GetQAtoms(oechem.OEAtomIsInReactant()))
printatoms("Product atoms :", reaction.GetQAtoms(oechem.OEAtomIsInProduct()))
# @ </SNIPPET-RXN-ATOMS>
# initializing library generator
libgen = oechem.OELibraryGen()
libgen.Init(reaction)
# @ <SNIPPET-RXN-EXPH>
libgen.SetExplicitHydrogens(False)
# @ </SNIPPET-RXN-EXPH>
# @ <SNIPPET-RXN-VCORRECT>
libgen.SetValenceCorrection(True)
# @ </SNIPPET-RXN-VCORRECT>
# adding reactants
mol = oechem.OEGraphMol()
oechem.OESmilesToMol(mol, "c1ccc(cc1)C(=O)O")
libgen.AddStartingMaterial(mol, 0)
mol.Clear()
oechem.OESmilesToMol(mol, "CC(C)CN")
libgen.AddStartingMaterial(mol, 1)
# accessing generated products
for product in libgen.GetProducts():
    print("product smiles =", oechem.OEMolToSmiles(product))
# @ </SNIPPET>
