#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

from __future__ import print_function
from openeye import oechem

qmol = oechem.OEGraphMol()
oechem.OESmilesToMol(qmol, "c1ccccc1")

# create a substructure search object
# @ <SNIPPET>
itag = oechem.OEGetTag("__origr_idx")
for ai in qmol.GetAtoms():
    ai.SetData(itag, ai.GetIdx())

ss = oechem.OESubSearch(qmol, oechem.OEExprOpts_DefaultAtoms, oechem.OEExprOpts_DefaultBonds)
tmol = oechem.OEGraphMol()
oechem.OESmilesToMol(tmol, "Cc1ccccc1")
oechem.OEPrepareSearch(tmol, ss)

for mi in ss.Match(tmol, True):
    match = oechem.OEMatch()
    for apairi in mi.GetAtoms():
        pidx = apairi.pattern.GetData(itag)
        pattern = qmol.GetAtom(oechem.OEHasAtomIdx(pidx))
        match.AddPair(pattern, apairi.target)

# @ </SNIPPET>
