#!/usr/bin/env python
# (C) 2017 OpenEye Scientific Software Inc. All rights reserved.
#
# TERMS FOR USE OF SAMPLE CODE The software below ("Sample Code") is
# provided to current licensees or subscribers of OpenEye products or
# SaaS offerings (each a "Customer").
# Customer is hereby permitted to use, copy, and modify the Sample Code,
# subject to these terms. OpenEye claims no rights to Customer's
# modifications. Modification of Sample Code is at Customer's sole and
# exclusive risk. Sample Code may require Customer to have a then
# current license or subscription to the applicable OpenEye offering.
# THE SAMPLE CODE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED.  OPENEYE DISCLAIMS ALL WARRANTIES, INCLUDING, BUT
# NOT LIMITED TO, WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. In no event shall OpenEye be
# liable for any damages or liability in connection with the Sample Code
# or its use.

from __future__ import print_function
import sys
from openeye import oechem
from openeye import oespicoli

if len(sys.argv) != 2:
    oechem.OEThrow.Usage("%s <input>" % sys.argv[0])

ims = oechem.oemolistream()
if not ims.open(sys.argv[1]):
    oechem.OEThrow.Fatal("Unable to open %s" % sys.argv[1])

mol = oechem.OEGraphMol()
if not oechem.OEReadMolecule(ims, mol):
    oechem.OEThrow.Fatal("Unable to read a molecule")
oechem.OEAssignBondiVdWRadii(mol)

surf = oespicoli.OESurface()
oespicoli.OEMakeMolecularSurface(surf, mol)

# @ <SNIPPET-AtomAreas>
areas = oechem.OEFloatArray(surf.GetNumTriangles())
oespicoli.OECalculateTriangleAreas(surf, areas)

atomareas = [0.0] * mol.GetMaxAtomIdx()

for i in range(surf.GetNumTriangles()):
    tri = surf.GetTriangle(i)

    a1 = surf.GetAtomsElement(tri[0])
    a2 = surf.GetAtomsElement(tri[1])
    a3 = surf.GetAtomsElement(tri[2])

    atomareas[a1] += areas[i]/3.0
    atomareas[a2] += areas[i]/3.0
    atomareas[a3] += areas[i]/3.0

for atom in mol.GetAtoms():
    print("atom %d area = %2.4f" % (atom.GetIdx(), atomareas[atom.GetIdx()]))
# @ </SNIPPET-AtomAreas>
